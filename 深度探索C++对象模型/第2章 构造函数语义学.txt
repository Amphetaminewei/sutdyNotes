第2章 构造函数语义学


本章大量出现以下术语：
    implicit：暗中的、隐式的（通常指并非在程序源代码中出现的
    explicit：显示的（通常指程序源代码中出现的
    trivial：没有用的
    nontrivial：有用的
    memberwise：对每一个 member 施以...
    bitwise：对每一个 bit 施以...
    semantics：语义

“关于C++，最常听到的一个抱怨就是，编译器背着程序员做了太多事情”，这里举的例子是 Schwarz Error
简单来说就是，原本 cin << intVaul 是并不能通过编译的，但是如果你提供了一个 operator int() 来
将其转换为 int ，那么故事就开始了，由于提供了可行的隐式转换路径， cin 将会被转换为 int 而 <<
将会被解释为左移位运算符

同样对于提供了只有一个参数的构造函数的类型，在遇到类型不匹配问题时，编译器会去将只有一个参数的构
造函数作为隐式类型转换的路径，也就是通过构造来转换类型，而 explicit 关键词就是为了防止这种情况而
设计的

这一章中，作者将挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”中的冲击
讲道理这本书的笔记还真不怎么好做，起码相对于 effective C++ 系列来说挺不好做的