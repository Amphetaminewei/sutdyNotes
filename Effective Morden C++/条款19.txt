使用std::shared_ptr管理具备共享所有权的资源


类似unique_ptr，shared_ptr也是智能指针，不同点在于shared_ptr可以共享对象
如果说unique_ptr帮你解决了你不希望指针共享并可以自动释放内存的问题的话，shared_ptr则是帮你管理共享指针并自动释放内存
某种意义上这种可以共享和原生指针的行为更像

shared_ptr取消了unique_ptr不能共享指针的限制并且通过引用计数来保证在最后一个拥有资源的对象析构时释放资源
之前在More Effective C++中专门讲到过引用计数，他是将指针加上一个值，用来记录有多少个指针在同时拥有这个资源
每少一个对象指向这个资源将引用计数减一，直到最后一个指向这个资源的对象析构时将资源释放

这么看起来，似乎如果被指向的对象自身有一个引用计数然后每有一个指针指向它就加一，好像看起来不错蒽
但是这样的做法一点都不通用，你总不能改写每个对象的实现吧，而且这种做法也不通用

引用计数会有一些性能影响：
    shared_ptr的尺寸是裸指针的两倍
    引用计数的内存必须动态分配（不论有多少个shared_ptr指向同一个对象，引用计数实际上只需要一个）
    引用计数的递增和递减必须是原子操作（在多线程中，如果在不同线程中，引用计数同时被增减，可能会出问题）

由于之前没怎么了解过多线程，所以我查了一下，之前书中提到的atomic为原子类型，对这种类型的操作不会由于抢夺CPU而暂停
也就是如果开始执行，就执行到底，否则不执行，原子操作一般都比非原子操作要慢

shared_ptr和unique_ptr在自定义析构器的支持上也有区别，unique_pre将析构器的类型作为了自身类型的一部分，
而shared_ptr则是通过构造函数传入自定义析构器，析构器不同不会影响类型，同时自定义析构器不会影响shared_ptr的尺寸，
它一直都是裸指针的两倍大小，而析构器的内存不属于shared_ptr对象的一部分

每个shared_ptr管理的对象都有一个控制块，控制块的创建由创建首个指向该对象的shared_ptr的函数决定（也就是他的构造函数或者make_shared函数吧
控制块创建遵循的规则：
    make_shared总是创建一个控制块
    从具有专属所有权的指针出发构造一个shared_ptr时会创建一个控制块
    当shared_ptr构造函数以裸指针作为参数时，创建一个控制块
注意！以裸指针创建shared_ptr会带来很多问题，首先会造成一个对象有多重控制块的情况，例如：
T* p = new T;
std::shared_ptr<T> sp1(p);
std::shared_ptr<T> sp2(p);
这样会出现两个控制块！
还有，会导致shared_ptr悬空，例如：
T* p = new T;
std::shared_ptr<T> sp1(p);
delete p;
！！！内存被释放了那么sp1呢，它悬空了！而且原本的裸指针，如果你将sp1给delete，那么p就悬空了！
所以请尽可能避免使用裸指针作为参数来构造shared_ptr，需要的时候请传递new表达式

也许你注意了不将裸指针传入shared_ptr的构造函数，但是有很多情况会隐式的将裸指针传入，例如：
std::vector<shared_ptr<T>> processedT;
class T{
public:
    void process() {
        ...
        processedT.emplace_back(this);
    }
}
实际上也是用一个裸指针构造了shared_ptr，然后创建一个新的控制块

标准库提供了enable_shared_from_thiis解决这种问题，这个类使用了一个奇怪的模式：奇妙递归模板模式（CRTP）
去查了一下，CRTP是模板编程时的一种惯用法emmmm，
简单来说就是，将基类设为template类，然后通过继承基类并将子类类型作为基类的模板类型，通过基类来调用子类的函数
咋这么绕口呢emmmm，找到的例子：
template<typename Child>
class Animal
{
public:
	void Run()
	{
		static_cast<Child*>(this)->Run();
	}
};

class Dog :public Animal<Dog>
{
public:
	void Run()
	{
		cout << "Dog Run" << endl;
	}
};

一旦，你将资源托管给了shared_ptr,就不再能收回资源的所有权了！

shared_ptr不能处理数组，并没有shared_ptr<T[]>这种存在