优先使用std::make_unique和std::make_shared，而非直接使用new

在最简单的make_unique实现中，只需要将形参向构造函数做一次完美转发
他的工作也正是如此，make系列函数的主要任务就是将参数完美转发给构造函数并返回一个指向该对象的智能指针

make系列函数给你带来最只管的好处是可以少写字母emmmm（众所周知程序员一个比一个懒

而第二个好处是异常安全
在运行期，传递给函数的实参必须在函数调用被发起之前完成评估求值，也就是如下代码
processWidget(std::shared_ptr<Widget> (new Widget), computePriority()) { }
会先执行完成shared_ptr的构造和comoutePriority()后，才会执行processWidget()的函数体，
看起来好像还是没问题，但是！
new和构造shared_ptr实际上是两个动作，也就是在执行processWidget()前，有三个动作要完成
而且这三个动作的执行，除了构造一定在new之后以为，没有任何其他规律，编译器也不会做任何保证
那么如果computePriority()在两个动作之间执行，也就是new-computePriority()-shared_ptr()，且computePriority()抛出了一个异常
那么shared_ptr不会托管new申请到的内存，发生了内存泄漏（你申请了一块内存，但是没有任何人能取得这块内存！）
但是如果，用make_shared代替new + shared_ptr()的话，processWidget()执行前的动作就从三步变成了两步
如果computePriority()抛出异常，那么要么shared_ptr已经构造完成，要么还完全没开始构造，不会发生内存泄漏

第三个好处是性能
std::shared_ptr<Widget> p(new Widget);
看上去申请了一次内存，实际上是两次，因为在shared_ptr的构造函数中还要为控制块申请内存
看，两次内存申请分开了，分别申请了两个内存
但是使用std::make_shared则只申请一次内存，申请了一整块内存存放对象和控制块
节省了空间，而且因为只需要申请一次内存同时也节省了时间



同时也有一些场景不适合使用nake系列函数
    所有的make函数都不允许使用自定义析构器
    在make系列函数中，对形参进行完美转发的代码使用的是圆括号而不是大括号
        如果你想使用大括号初始化物来创建智能指针，就智能使用new了

而对于shared_ptr还会因为控制块，让你在使用make时多一些限制
有一些类会重载自己的operator new和operator delete，但是前面讲过，make系列函数会将控制块和对象放在一个内存块中
这样的话在析构的时候，只会按照这些类定义的operator delete来析构，不会释放控制块的内存，
所以使用nake系列函数去创建那些带有自定义operator new和operator delete的类的对象并不明智

还有，同样是由于make系列函数将对象和控制块放在一整块内存中，由于weak_ptr也会指向控制块，
所以即使最后一个shared_ptr被析构了，只要还有weak_ptr指向控制块，shared_ptr和内存就需要等到控制块的内存可以释放时，
也就是最后一个weak_ptr析构之后，才能释放，无疑这会浪费内存，尤其在对象尺寸可观时


题外话，复习一下函数的按值传递，对于右值实参，形参的构造仅需要一次移动，而对于左值则需要一次复制
再复习一下左值和右值吧，左值是实际的有名字并关联了内存空间的对象，意味着你可以通过名字得到它，而右值则是没有名字的临时对象
在我的理解中，在形参的构造中，从临时量到临时量显然会更快蒽，但是对于左值，通过传值进入函数则会需要将他的值复制一次给一个临时变量（形参