1.2 关键词所带来的差异


如果不是为了维护与C之间的兼容性，C++远可以比现在更简单些

关键词的困扰
    在C这边， struct 的设计理由因其用法而存在，而在C++这一边，选择 struct 或 class 作为关键词
    并用以导入 ADT 的理由，是希望从此比较健全
    真正的问题在于使用 class 或 struct 关键词是否可以给予“类型的内部声明”以某种承诺（我的理解就
    是问题在于是否 class 和 struct 的底层实现是完全一样的，编译器是不是能保证二者行为完全一致

策略性正确的 struct
    如果迫切需求一个相当复杂的 C++ class 的某部分数据，使他拥有C声明的那种模样，那么那一部分最好
    抽出来成为一个单独的 struct 声明
    将 C++ 与 C 组合起来的办法就是，从 C struct 中派生 C++ 的部分
    这种习惯法已不再被推荐，因为某些编译器在支持 virtual function 的机制中对于 class 的继承布局
    做了一些变化，组合而非继承才是把 C 和 C++ 结合在一起的唯一可行方法
    C struct 在 C++ 中的一个合理用途，是当你要传递“一个复杂的 class object 的全部或部分”到某个
    C 函数中