1.3 对象的差异


C++程序设计模直接支持三种程序设计范式：
    1.程序模型
        char boy[] = "Danny";
        char *p_son;
        ...
        p_son = new char[strlen(boy) + 1];
        strcpy(p_son, boy);
        ...
        if(!strcmp(p_son, boy))
            take_to_disneyland(boy);
        //这种也是C支持的范式
    2.抽象数据类模型
        //此模型所谓的抽象是和一组表达式（public接口）一起提供的，那时运算定义仍然隐而未明
        String girl = "Anna";
        String daughter;
        ...
        //这里使用了重载的运算符String::operator=();
        daughter = girl;
        ...
        //这里使用了重载的运算符String::operator==();
        if(girl == daughter)
            take_to_disneyland(girl);
    3.面向对象模型
        此模型中有一些彼此相关的类型，通过一个抽象的 base class（用以提供公共接口）被封装起来

    纯粹以一种 paradigm 写程序有助于整体行为的良好稳固，然而如果混合了不同的 paradigm ，就可能带
    来让人吃惊的后果，特别是在没有谨慎处理的情况下，最常见的疏忽发生在你以一个 base class的具体实
    例来完成某种多态局面
    在 OO paradigm 中，程序员需要处理一个未知实例，它的类型虽然有所界定，却可有可无，原则上被指定
    的 object 的真实类型在每一个特定执行点之前，是无法解析的，相反在 ADT paradigm 中，程序员处理
    的是一个拥有固定而单一类型的实例，他在编译时期已经完全定义好了，如下：
        //描述 object ：不确定类型
        Librar_materials *px = retrieve_some_material();
        Librar_materials &rx = *px;
        //描述已知物：不可能有令人惊讶的结果产生
        Librar_materials dx = *px;
    你绝对无法确定的说出 px 和 rx 到底指向何种类型 object，你只能说他要么是 Librar_materials 
    object，要么是他的子类型

    C++以下列方法支持多态：
        1.经由一组隐式类型转换
        2.经由 virtual function 机制
        3.经由 dynamic_cast 和 typeid 运算符

    多态的主要用途是经由一个共同的接口来影响类型的封装，这个接口通常是被定义在一个抽象的 base class 中
    这个共享接口是以 virtual function 机制引发的，它可以在执行期根据 object 的真正类型解析出到底是哪
    一个函数实例被调用

    需要多少内存才能表现一个 class object ：
        1.其非静态成员数据的大小总和
        2.加上任何由于 alignment 的需求而填补上去的空间（可能在成员之间，也可能在集合体边界
        3.加上为了至此 virtual 而由内部产生的任何额外负担

指针的类型
    来看三个指针：
        ZooAnimal *px;
        int *pi;
        Array<String> *pta;
    如果从内存需求的观点来说，这三个指针没有任何区别，他们三个都需要有足够的内存来防止一个机器地址（通常是
    个 word
    指向不同类型对象的指针之间的差异在于对其寻址出来的 object 类型不同
    也就是指针类型会教导编译器如何解释某个特定的地址中内存的内容及其大小：
        指向地址1000的整数指针，在32位机器上，将涵盖地址空间1000-1003
        如果 String 是传统的 8—bytes 那个一个 ZooAnimal 指针将横跨地址空间 1000-1015（4+8+4
    那么对于一个指向地址1000的 void* 指针，我们不知道 void 会占用几个内存块，也就不能操作这块内存的数据了
    （我的理解是，指针指向的对象在内存空间的范围，是由指针类型告知编译器的，如果不知道指针类型，也就不知道
    对象存储的内存范围，也就不能操作对象
    所以转换（cast）只是一种编译器指令，大多数情况下他都并不改变一个指针所含的真正地址，他只影响“被指出的内
    存的大小和其内容”
    （我的理解是，由于指针类型决定了怎么解释这块内存，那么改变指针类型就可以改变怎么解释这块内存，例如：
        a->b //a 类型指针指向内存b，对 b 内存存储的数据就会被解释为 a 类型
        b->b //b 类型指针指向内存b，对这块内存的数据的解释就是 b 类型

加上多态后
    对于一个继承体系：
        class Bear ： public ZooAnimal
    一个 Bear 类型的指针和一个 ZooAnimal 类型的指针的区别在于涵盖的范围不同， Bear 类型的指针涵盖了 Bear object
    内存的全部范围，而 ZooAnimal 类型的指针则只涵盖 Bear object 中储存了 ZooAnimal 的范围，所以你不能用 ZooAnimal
    类型指针去处理 ZooAnimal 成员之外的内容，唯一的例外是通过 virtual 机制
    当我们写下 pz->rotate() 时，pz 的类型将在编译时期决定以下两点
        1.固定的可用接口
        2.该接口的 access level
    一个指针或引用之所以支持多态，是因为他并不会引发内存中任何与类型有关的内存委托操作，会受到改变的只有他们指向内存的
    大小和内容解释方式而已（而真正的对象则会发生类型切割问题